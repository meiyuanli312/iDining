package db;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import model.Restaurant;

import org.bson.Document;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import yelp.YelpAPI;

import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.regex;

public class MongoDBConnection implements DBConnection {

    private static final int MAX_RECOMMENDED_RESTAURANTS = 10;

    private MongoClient mongoClient;
    private MongoDatabase db;

    public MongoDBConnection() {
   	 // Connects to local mongodb server.
   	 mongoClient = new MongoClient();
   	 db = mongoClient.getDatabase(DBUtil.DB_NAME);

    }

    @Override
    public void close() {
   	 if (mongoClient != null) {
   		 mongoClient.close();
   	 }
    }

    @Override
    public void setVisitedRestaurants(String userId, List<String> businessIds) {
    	db.getCollection("users").updateOne(new Document("user_id", userId),
      			 new Document("$pushAll", new Document("visited", businessIds)));
    }

    @Override
    public void unsetVisitedRestaurants(String userId, List<String> businessIds) {
    	db.getCollection("users").updateOne(new Document("user_id", userId),
      			 new Document("$pullAll", new Document("visited", businessIds)));
    }

    @Override
    public Set<String> getVisitedRestaurants(String userId) {
    	Set<String> set = new HashSet<>();
		// db.users.find({user_id:userId})
		FindIterable<Document> iterable = db.getCollection("users").find(
				new Document("user_id", userId));

		if (iterable.first().containsKey("visited")) {
	   		List<String> list = (List<String>) iterable.first().get("visited");
			set.addAll(list);
	   	}
		return set;
    }

    @Override
    public JSONObject getRestaurantsById(String businessId, boolean isVisited) {
      	 FindIterable<Document> iterable = db.getCollection("restaurants").find(
      			 eq("business_id", businessId));
      	 try {
      		 return new JSONObject(iterable.first().toJson());
      	 } catch (JSONException e) {
      		 e.printStackTrace();
      	 }
      	 return null;
    }

    @Override
    public JSONArray recommendRestaurants(String userId) {
   	 return null;
    }

    @Override
    public JSONArray searchRestaurants(String userId, double lat, double lon, String term) {
   	 return null;
    }

    @Override
    public Set<String> getCategories(String businessId) {
   	 return null;
    }

    @Override
    public Set<String> getBusinessId(String category) {
   	 return null;
    }

   @Override
    public Boolean verifyLogin(String userId, String password) {
   	 // TODO Auto-generated method stub
   	 return null;
    }

    @Override
    public String getFirstLastName(String userId) {
   	 // TODO Auto-generated method stub
   	 return null;
    }
}